2024-07-12 13:06:13,686 INFO ipython === bench console session ===
2024-07-12 13:06:13,686 INFO ipython frappe.get_doc("Sales Invoice", "BATU/V/2400001").cancel()
2024-07-12 13:06:13,686 INFO ipython === session end ===
2024-07-12 13:21:11,689 INFO ipython === bench console session ===
2024-07-12 13:21:11,689 INFO ipython === session end ===
2024-07-15 13:32:08,263 INFO ipython === bench console session ===
2024-07-15 13:32:08,264 INFO ipython from integracion.integracion.employee_status_update import update_employee_status, disable_inactive_employee_users
2024-07-15 13:32:08,264 INFO ipython update_employee_status()
2024-07-15 13:32:08,264 INFO ipython disable_inactive_employee_users()
2024-07-15 13:32:08,264 INFO ipython === session end ===
2024-07-24 14:17:32,377 INFO ipython === bench console session ===
2024-07-24 14:17:32,377 INFO ipython import os
import logging
from urllib.parse import quote
from office365.runtime.auth.user_credential import UserCredential
from office365.sharepoint.client_context import ClientContext
import frappe

# Configurar el logger
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/path/to/your/log/upload_sp.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def get_parent_folder_name(doctype, docname):
    fields_to_check = ['company', 'empresa', 'custom_empresa', 'curso', 'proyecto', 'departamento']
    logger.info(f"Obteniendo campos del documento {doctype} con nombre {docname}")
    try:
        related_doc = frappe.get_doc(doctype, docname)
        logger.info(f"Campos del documento {doctype}: {related_doc.as_dict()}")
        for field in fields_to_check:
            if field in related_doc.as_dict():
                logger.info(f"Campo {field} encontrado con valor {related_doc.get(field)}")
                return related_doc.get(field)
    except Exception as e:
        logger.error(f"Error obteniendo el documento {doctype} con nombre {docname}: {e}")
        return None

def create_folder_if_not_exists(ctx, site_relative_url, folder_relative_url):
    try:
        folder_full_relative_url = f"{site_relative_url}/{folder_relative_url}".strip('/')
        logger.info(f"Ruta relativa {site_relative_url}")
        logger.info(f"Ruta carpeta relativa {folder_relative_url}")
        parent_folder_url = '/'.join(folder_full_relative_url.split('/')[:-1])
        logger.info(f"Ruta padre relativa {parent_folder_url}")
        logger.info(f"Comprobando existencia de carpeta en la ruta: /{folder_full_relative_url}")
        try:
            folder = ctx.web.get_folder_by_server_relative_url(f"/{folder_full_relative_url}")
            ctx.execute_query()
            logger.info(f"La carpeta ya existe: {folder_full_relative_url}")
        except Exception as e:
            logger.info(f"La carpeta no existe, procediendo a crearla. Error al comprobar existencia: {e}")
            parent_folder = ctx.web.get_folder_by_server_relative_url(f"/{parent_folder_url}")
            ctx.execute_query()
            new_folder = parent_folder.folders.add(folder_full_relative_url.split('/')[-1]).execute_query()
            logger.info(f"Carpeta creada: {new_folder.serverRelativeUrl}")
    except Exception as e:
        logger.error(f"Error creando carpeta en {folder_full_relative_url}: {e}")

def upload_file_to_sharepoint(file_doc):
    logger.info(f"Procesando archivo: {file_doc.name}")
    try:
        file_path = frappe.get_site_path(file_doc.file_url.strip("/"))
        logger.info(f"Archivo encontrado: {file_path}")

        if not file_path or not os.path.isfile(file_path):
            logger.error(f"El archivo no existe o no se proporcionó una ruta válida: {file_path}")
            return

        doctype_name = file_doc.attached_to_doctype
        docname = file_doc.attached_to_name
        user_email = 'erp@grupoatu.com'
        user_password = 'D/888592322871uy'

        try:
            doc_biblioteca = frappe.get_doc('Bibliotecas SP', doctype_name)
        except frappe.DoesNotExistError:
            logger.error(f"No se encontró un documento para el doctype {doctype_name} en Bibliotecas SP. Terminando la ejecución.")
            return

        parent_folder_full_url = doc_biblioteca.url_sp
        logger.info(f"URL de la carpeta padre: {parent_folder_full_url}")

        start_idx = parent_folder_full_url.find('/sites/')
        if start_idx == -1:
            logger.error("La URL no contiene '/sites/'. No se puede calcular la ruta relativa.")
            return
        site_url = parent_folder_full_url[:start_idx + len('/sites/') + parent_folder_full_url[start_idx + len('/sites/'):].find('/')]
        site_relative_url = parent_folder_full_url[start_idx:]
        relative_path = parent_folder_full_url[start_idx + len('/sites/'):].lstrip('/')
        logger.info(f"Ruta relativa calculada: {relative_path}")
        logger.info(f"Conectando al contexto del sitio: {site_url}")

        credentials = UserCredential(user_email, user_password)
        ctx = ClientContext(site_url).with_credentials(credentials)

        parent_folder_name = get_parent_folder_name(doctype_name, docname)
        if not parent_folder_name:
            logger.error(f"No se encontró el nombre de la carpeta padre para {doctype_name} con nombre {docname}")
            return
        parent_folder_name_encoded = quote(parent_folder_name)
        logger.info(f"Nombre de la carpeta padre: {parent_folder_name}")

        first_folder_relative_url = f"{relative_path}/{parent_folder_name_encoded}".strip('/')
        second_folder_relative_url = f"{first_folder_relative_url}/{docname}".strip('/')
        logger.info(f"URL de la primera carpeta: {first_folder_relative_url}")
        logger.info(f"URL completa de la carpeta del documento: {second_folder_relative_url}")

        create_folder_if_not_exists(ctx, site_relative_url, first_folder_relative_url)
        create_folder_if_not_exists(ctx, site_relative_url, second_folder_relative_url)

        with open(file_path, 'rb') as file_content:
            content = file_content.read()

        file_name = os.path.basename(file_path)
        second_folder_relative_url_trimmed = '/'.join(second_folder_relative_url.split('/')[1:])
        file_url = f"/{second_folder_relative_url_trimmed}/{file_name}"
        target_folder = ctx.web.get_folder_by_server_relative_url(f"{second_folder_relative_url_trimmed}")

        ctx.execute_query()

        try:
            target_folder.upload_file(file_name, content).execute_query()
            logger.info(f"Archivo subido: {file_url}")
        except Exception as e:
            logger.error(f"Error al subir archivo a SharePoint: {str(e)}")
        return file_url
    except Exception as e:
        logger.error(f"Error al subir archivo a SharePoint: {str(e)}")

def process_all_files():
    logger.info("Iniciando procesamiento de todos los archivos de tipo File.")
    all_files = frappe.get_all('File', filters={'attached_to_doctype': ['is', 'set']}, fields=['name', 'attached_to_doctype'])
    for file_entry in all_files:
        try:
            file_doc = frappe.get_doc('File', file_entry['name'])
            upload_file_to_sharepoint(file_doc)
        except Exception as e:
            logger.error(f"Error procesando archivo {file_entry['name']}: {e}")

if __name__ == "__main__":
    process_all_files()
2024-07-24 14:17:32,377 INFO ipython import os
import logging
from urllib.parse import quote
from office365.runtime.auth.user_credential import UserCredential
from office365.sharepoint.client_context import ClientContext
import frappe

# Configurar el logger
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/home/frappe/frappe-bench/apps/integracion/integracion/integracion/logs/upload_sp_ejec.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def get_parent_folder_name(doctype, docname):
    fields_to_check = ['company', 'empresa', 'custom_empresa', 'curso', 'proyecto', 'departamento']
    logger.info(f"Obteniendo campos del documento {doctype} con nombre {docname}")
    try:
        related_doc = frappe.get_doc(doctype, docname)
        logger.info(f"Campos del documento {doctype}: {related_doc.as_dict()}")
        for field in fields_to_check:
            if field in related_doc.as_dict():
                logger.info(f"Campo {field} encontrado con valor {related_doc.get(field)}")
                return related_doc.get(field)
    except Exception as e:
        logger.error(f"Error obteniendo el documento {doctype} con nombre {docname}: {e}")
        return None

def create_folder_if_not_exists(ctx, site_relative_url, folder_relative_url):
    try:
        folder_full_relative_url = f"{site_relative_url}/{folder_relative_url}".strip('/')
        logger.info(f"Ruta relativa {site_relative_url}")
        logger.info(f"Ruta carpeta relativa {folder_relative_url}")
        parent_folder_url = '/'.join(folder_full_relative_url.split('/')[:-1])
        logger.info(f"Ruta padre relativa {parent_folder_url}")
        logger.info(f"Comprobando existencia de carpeta en la ruta: /{folder_full_relative_url}")
        try:
            folder = ctx.web.get_folder_by_server_relative_url(f"/{folder_full_relative_url}")
            ctx.execute_query()
            logger.info(f"La carpeta ya existe: {folder_full_relative_url}")
        except Exception as e:
            logger.info(f"La carpeta no existe, procediendo a crearla. Error al comprobar existencia: {e}")
            parent_folder = ctx.web.get_folder_by_server_relative_url(f"/{parent_folder_url}")
            ctx.execute_query()
            new_folder = parent_folder.folders.add(folder_full_relative_url.split('/')[-1]).execute_query()
            logger.info(f"Carpeta creada: {new_folder.serverRelativeUrl}")
    except Exception as e:
        logger.error(f"Error creando carpeta en {folder_full_relative_url}: {e}")

def upload_file_to_sharepoint(file_doc):
    logger.info(f"Procesando archivo: {file_doc.name}")
    try:
        file_path = frappe.get_site_path(file_doc.file_url.strip("/"))
        logger.info(f"Archivo encontrado: {file_path}")

        if not file_path or not os.path.isfile(file_path):
            logger.error(f"El archivo no existe o no se proporcionó una ruta válida: {file_path}")
            return

        doctype_name = file_doc.attached_to_doctype
        docname = file_doc.attached_to_name
        user_email = 'erp@grupoatu.com'
        user_password = 'D/888592322871uy'

        try:
            doc_biblioteca = frappe.get_doc('Bibliotecas SP', doctype_name)
        except frappe.DoesNotExistError:
            logger.error(f"No se encontró un documento para el doctype {doctype_name} en Bibliotecas SP. Terminando la ejecución.")
            return

        parent_folder_full_url = doc_biblioteca.url_sp
        logger.info(f"URL de la carpeta padre: {parent_folder_full_url}")

        start_idx = parent_folder_full_url.find('/sites/')
        if start_idx == -1:
            logger.error("La URL no contiene '/sites/'. No se puede calcular la ruta relativa.")
            return
        site_url = parent_folder_full_url[:start_idx + len('/sites/') + parent_folder_full_url[start_idx + len('/sites/'):].find('/')]
        site_relative_url = parent_folder_full_url[start_idx:]
        relative_path = parent_folder_full_url[start_idx + len('/sites/'):].lstrip('/')
        logger.info(f"Ruta relativa calculada: {relative_path}")
        logger.info(f"Conectando al contexto del sitio: {site_url}")

        credentials = UserCredential(user_email, user_password)
        ctx = ClientContext(site_url).with_credentials(credentials)

        parent_folder_name = get_parent_folder_name(doctype_name, docname)
        if not parent_folder_name:
            logger.error(f"No se encontró el nombre de la carpeta padre para {doctype_name} con nombre {docname}")
            return
        parent_folder_name_encoded = quote(parent_folder_name)
        logger.info(f"Nombre de la carpeta padre: {parent_folder_name}")

        first_folder_relative_url = f"{relative_path}/{parent_folder_name_encoded}".strip('/')
        second_folder_relative_url = f"{first_folder_relative_url}/{docname}".strip('/')
        logger.info(f"URL de la primera carpeta: {first_folder_relative_url}")
        logger.info(f"URL completa de la carpeta del documento: {second_folder_relative_url}")

        create_folder_if_not_exists(ctx, site_relative_url, first_folder_relative_url)
        create_folder_if_not_exists(ctx, site_relative_url, second_folder_relative_url)

        with open(file_path, 'rb') as file_content:
            content = file_content.read()

        file_name = os.path.basename(file_path)
        second_folder_relative_url_trimmed = '/'.join(second_folder_relative_url.split('/')[1:])
        file_url = f"/{second_folder_relative_url_trimmed}/{file_name}"
        target_folder = ctx.web.get_folder_by_server_relative_url(f"{second_folder_relative_url_trimmed}")

        ctx.execute_query()

        try:
            target_folder.upload_file(file_name, content).execute_query()
            logger.info(f"Archivo subido: {file_url}")
        except Exception as e:
            logger.error(f"Error al subir archivo a SharePoint: {str(e)}")
        return file_url
    except Exception as e:
        logger.error(f"Error al subir archivo a SharePoint: {str(e)}")

def process_all_files():
    logger.info("Iniciando procesamiento de todos los archivos de tipo File.")
    all_files = frappe.get_all('File', filters={'attached_to_doctype': ['is', 'set']}, fields=['name', 'attached_to_doctype'])
    for file_entry in all_files:
        try:
            file_doc = frappe.get_doc('File', file_entry['name'])
            upload_file_to_sharepoint(file_doc)
        except Exception as e:
            logger.error(f"Error procesando archivo {file_entry['name']}: {e}")

if __name__ == "__main__":
    process_all_files()
import os
import logging
from urllib.parse import quote
from office365.runtime.auth.user_credential import UserCredential
from office365.sharepoint.client_context import ClientContext
import frappe

# Configurar el logger
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/home/frappe/frappe-bench/apps/integracion/integracion/integracion/logs/upload_sp_ejec.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def get_parent_folder_name(doctype, docname):
    fields_to_check = ['company', 'empresa', 'custom_empresa', 'curso', 'proyecto', 'departamento']
    logger.info(f"Obteniendo campos del documento {doctype} con nombre {docname}")
    try:
        related_doc = frappe.get_doc(doctype, docname)
        logger.info(f"Campos del documento {doctype}: {related_doc.as_dict()}")
        for field in fields_to_check:
            if field in related_doc.as_dict():
                logger.info(f"Campo {field} encontrado con valor {related_doc.get(field)}")
                return related_doc.get(field)
    except Exception as e:
        logger.error(f"Error obteniendo el documento {doctype} con nombre {docname}: {e}")
        return None

def create_folder_if_not_exists(ctx, site_relative_url, folder_relative_url):
    try:
        folder_full_relative_url = f"{site_relative_url}/{folder_relative_url}".strip('/')
        logger.info(f"Ruta relativa {site_relative_url}")
        logger.info(f"Ruta carpeta relativa {folder_relative_url}")
        parent_folder_url = '/'.join(folder_full_relative_url.split('/')[:-1])
        logger.info(f"Ruta padre relativa {parent_folder_url}")
        logger.info(f"Comprobando existencia de carpeta en la ruta: /{folder_full_relative_url}")
        try:
            folder = ctx.web.get_folder_by_server_relative_url(f"/{folder_full_relative_url}")
            ctx.execute_query()
            logger.info(f"La carpeta ya existe: {folder_full_relative_url}")
        except Exception as e:
            logger.info(f"La carpeta no existe, procediendo a crearla. Error al comprobar existencia: {e}")
            parent_folder = ctx.web.get_folder_by_server_relative_url(f"/{parent_folder_url}")
            ctx.execute_query()
            new_folder = parent_folder.folders.add(folder_full_relative_url.split('/')[-1]).execute_query()
            logger.info(f"Carpeta creada: {new_folder.serverRelativeUrl}")
    except Exception as e:
        logger.error(f"Error creando carpeta en {folder_full_relative_url}: {e}")

def upload_file_to_sharepoint(file_doc):
    logger.info(f"Procesando archivo: {file_doc.name}")
    try:
        file_path = frappe.get_site_path(file_doc.file_url.strip("/"))
        logger.info(f"Archivo encontrado: {file_path}")

        if not file_path or not os.path.isfile(file_path):
            logger.error(f"El archivo no existe o no se proporcionó una ruta válida: {file_path}")
            return

        doctype_name = file_doc.attached_to_doctype
        docname = file_doc.attached_to_name
        user_email = 'erp@grupoatu.com'
        user_password = 'D/888592322871uy'

        try:
            doc_biblioteca = frappe.get_doc('Bibliotecas SP', doctype_name)
        except frappe.DoesNotExistError:
            logger.error(f"No se encontró un documento para el doctype {doctype_name} en Bibliotecas SP. Terminando la ejecución.")
            return

        parent_folder_full_url = doc_biblioteca.url_sp
        logger.info(f"URL de la carpeta padre: {parent_folder_full_url}")

        start_idx = parent_folder_full_url.find('/sites/')
        if start_idx == -1:
            logger.error("La URL no contiene '/sites/'. No se puede calcular la ruta relativa.")
            return
        site_url = parent_folder_full_url[:start_idx + len('/sites/') + parent_folder_full_url[start_idx + len('/sites/'):].find('/')]
        site_relative_url = parent_folder_full_url[start_idx:]
        relative_path = parent_folder_full_url[start_idx + len('/sites/'):].lstrip('/')
        logger.info(f"Ruta relativa calculada: {relative_path}")
        logger.info(f"Conectando al contexto del sitio: {site_url}")

        credentials = UserCredential(user_email, user_password)
        ctx = ClientContext(site_url).with_credentials(credentials)

        parent_folder_name = get_parent_folder_name(doctype_name, docname)
        if not parent_folder_name:
            logger.error(f"No se encontró el nombre de la carpeta padre para {doctype_name} con nombre {docname}")
            return
        parent_folder_name_encoded = quote(parent_folder_name)
        logger.info(f"Nombre de la carpeta padre: {parent_folder_name}")

        first_folder_relative_url = f"{relative_path}/{parent_folder_name_encoded}".strip('/')
        second_folder_relative_url = f"{first_folder_relative_url}/{docname}".strip('/')
        logger.info(f"URL de la primera carpeta: {first_folder_relative_url}")
        logger.info(f"URL completa de la carpeta del documento: {second_folder_relative_url}")

        create_folder_if_not_exists(ctx, site_relative_url, first_folder_relative_url)
        create_folder_if_not_exists(ctx, site_relative_url, second_folder_relative_url)

        with open(file_path, 'rb') as file_content:
            content = file_content.read()

        file_name = os.path.basename(file_path)
        second_folder_relative_url_trimmed = '/'.join(second_folder_relative_url.split('/')[1:])
        file_url = f"/{second_folder_relative_url_trimmed}/{file_name}"
        target_folder = ctx.web.get_folder_by_server_relative_url(f"{second_folder_relative_url_trimmed}")

        ctx.execute_query()

        try:
            target_folder.upload_file(file_name, content).execute_query()
            logger.info(f"Archivo subido: {file_url}")
        except Exception as e:
            logger.error(f"Error al subir archivo a SharePoint: {str(e)}")
        return file_url
    except Exception as e:
        logger.error(f"Error al subir archivo a SharePoint: {str(e)}")

def process_all_files():
    logger.info("Iniciando procesamiento de todos los archivos de tipo File.")
    all_files = frappe.get_all('File', filters={'attached_to_doctype': ['is', 'set']}, fields=['name', 'attached_to_doctype'])
    for file_entry in all_files:
        try:
            file_doc = frappe.get_doc('File', file_entry['name'])
            upload_file_to_sharepoint(file_doc)
        except Exception as e:
            logger.error(f"Error procesando archivo {file_entry['name']}: {e}")

if __name__ == "__main__":
    process_all_files()
2024-07-24 14:17:32,378 INFO ipython import os
import logging
from urllib.parse import quote
from office365.runtime.auth.user_credential import UserCredential
from office365.sharepoint.client_context import ClientContext
import frappe

# Configurar el logger
logger = logging.getLogger(__name__)
handler = logging.FileHandler('/home/frappe/frappe-bench/apps/integracion/integracion/integracion/logs/upload_sp_ejec.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levellevel)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def get_parent_folder_name(doctype, docname):
    fields_to_check = ['company', 'empresa', 'custom_empresa', 'curso', 'proyecto', 'departamento']
    logger.info(f"Obteniendo campos del documento {doctype} con nombre {docname}")
    try:
        related_doc = frappe.get_doc(doctype, docname)
        logger.info(f"Campos del documento {doctype}: {related_doc.as_dict()}")
        for field in fields_to_check:
            if field in related_doc.as_dict():
                logger.info(f"Campo {field} encontrado con valor {related_doc.get(field)}")
                return related_doc.get(field)
    except Exception as e:
        logger.error(f"Error obteniendo el documento {doctype} con nombre {docname}: {e}")
        return None

def create_folder_if_not_exists(ctx, site_relative_url, folder_relative_url):
    try:
        folder_full_relative_url = f"{site_relative_url}/{folder_relative_url}".strip('/')
        logger.info(f"Ruta relativa {site_relative_url}")
        logger.info(f"Ruta carpeta relativa {folder_relative_url}")
        parent_folder_url = '/'.join(folder_full_relative_url.split('/')[:-1])
        logger.info(f"Ruta padre relativa {parent_folder_url}")
        logger.info(f"Comprobando existencia de carpeta en la ruta: /{folder_full_relative_url}")
        try:
            folder = ctx.web.get_folder_by_server_relative_url(f"/{folder_full_relative_url}")
            ctx.execute_query()
            logger.info(f"La carpeta ya existe: {folder_full_relative_url}")
        except Exception as e:
            logger.info(f"La carpeta no existe, procediendo a crearla. Error al comprobar existencia: {e}")
            parent_folder = ctx.web.get_folder_by_server_relative_url(f"/{parent_folder_url}")
            ctx.execute_query()
            new_folder = parent_folder.folders.add(folder_full_relative_url.split('/')[-1]).execute_query()
            logger.info(f"Carpeta creada: {new_folder.serverRelativeUrl}")
    except Exception as e:
        logger.error(f"Error creando carpeta en {folder_full_relative_url}: {e}")

def upload_file_to_sharepoint(file_doc):
    logger.info(f"Procesando archivo: {file_doc.name}")
    try:
        file_path = frappe.get_site_path(file_doc.file_url.strip("/"))
        logger.info(f"Archivo encontrado: {file_path}")

        if not file_path or not os.path.isfile(file_path):
            logger.error(f"El archivo no existe o no se proporcionó una ruta válida: {file_path}")
            return

        doctype_name = file_doc.attached_to_doctype
        docname = file_doc.attached_to_name
        user_email = 'erp@grupoatu.com'
        user_password = 'D/888592322871uy'

        try:
            doc_biblioteca = frappe.get_doc('Bibliotecas SP', doctype_name)
        except frappe.DoesNotExistError:
            logger.error(f"No se encontró un documento para el doctype {doctype_name} en Bibliotecas SP. Terminando la ejecución.")
            return

        parent_folder_full_url = doc_biblioteca.url_sp
        logger.info(f"URL de la carpeta padre: {parent_folder_full_url}")

        start_idx = parent_folder_full_url.find('/sites/')
        if start_idx == -1:
            logger.error("La URL no contiene '/sites/'. No se puede calcular la ruta relativa.")
            return
        site_url = parent_folder_full_url[:start_idx + len('/sites/') + parent_folder_full_url[start_idx + len('/sites/'):].find('/')]
        site_relative_url = parent_folder_full_url[start_idx:]
        relative_path = parent_folder_full_url[start_idx + len('/sites/'):].lstrip('/')
        logger.info(f"Ruta relativa calculada: {relative_path}")
        logger.info(f"Conectando al contexto del sitio: {site_url}")

        credentials = UserCredential(user_email, user_password)
        ctx = ClientContext(site_url).with_credentials(credentials)

        parent_folder_name = get_parent_folder_name(doctype_name, docname)
        if not parent_folder_name:
            logger.error(f"No se encontró el nombre de la carpeta padre para {doctype_name} con nombre {docname}")
            return
        parent_folder_name_encoded = quote(parent_folder_name)
        logger.info(f"Nombre de la carpeta padre: {parent_folder_name}")

        first_folder_relative_url = f"{relative_path}/{parent_folder_name_encoded}".strip('/')
        second_folder_relative_url = f"{first_folder_relative_url}/{docname}".strip('/')
        logger.info(f"URL de la primera carpeta: {first_folder_relative_url}")
        logger.info(f"URL completa de la carpeta del documento: {second_folder_relative_url}")

        create_folder_if_not_exists(ctx, site_relative_url, first_folder_relative_url)
        create_folder_if_not_exists(ctx, site_relative_url, second_folder_relative_url)

        with open(file_path, 'rb') as file_content:
            content = file_content.read()

        file_name = os.path.basename(file_path)
        second_folder_relative_url_trimmed = '/'.join(second_folder_relative_url.split('/')[1:])
        file_url = f"/{second_folder_relative_url_trimmed}/{file_name}"
        target_folder = ctx.web.get_folder_by_server_relative_url(f"{second_folder_relative_url_trimmed}")

        logger.info(f"Verificando existencia de carpeta destino: {second_folder_relative_url_trimmed}")
        ctx.execute_query()

        try:
            logger.info(f"Subiendo archivo {file_name} a {second_folder_relative_url_trimmed}")
            target_folder.upload_file(file_name, content).execute_query()
            logger.info(f"Archivo subido: {file_url}")
        except Exception as e:
            logger.error(f"Error al subir archivo a SharePoint: {str(e)}")
        return file_url
    except Exception as e:
        logger.error(f"Error al subir archivo a SharePoint: {str(e)}")

def process_all_files():
    logger.info("Iniciando procesamiento de todos los archivos de tipo File.")
    all_files = frappe.get_all('File', filters={'attached_to_doctype': ['is', 'set']}, fields=['name', 'attached_to_doctype'])
    for file_entry in all_files:
        try:
            logger.info(f"Procesando archivo: {file_entry['name']} con doctype {file_entry['attached_to_doctype']}")
            file_doc = frappe.get_doc('File', file_entry['name'])
            upload_file_to_sharepoint(file_doc)
        except Exception as e:
            logger.error(f"Error procesando archivo {file_entry['name']}: {e}")

if __name__ == "__main__":
    process_all_files()
2024-07-24 14:17:32,378 INFO ipython === session end ===
2024-08-21 06:17:52,467 INFO ipython === bench console session ===
2024-08-21 06:17:52,468 INFO ipython def remove_quotes_from_course_name_and_code():
    # Consulta todos los registros de Course
    courses = frappe.get_all('Course', fields=['name', 'code'])

    for course in courses:
        # Elimina comillas del campo name y code
        clean_name = course['name'].replace('"', '')
        clean_code = course['code'].replace('"', '')

        # Actualiza el documento si alguno de los campos fue modificado
        if clean_name != course['name'] or clean_code != course['code']:
            frappe.db.set_value('Course', course['name'], 'name', clean_name)
            frappe.db.set_value('Course', course['name'], 'code', clean_code)

    frappe.db.commit()

# Ejecuta la función
remove_quotes_from_course_name_and_code()
2024-08-21 06:17:52,468 INFO ipython def remove_quotes_from_course_name_and_code():
    # Consulta todos los registros de Course
    courses = frappe.get_all('Course', fields=['name', 'code'])

    for course in courses:
        # Verifica si los campos no son None antes de reemplazar
        clean_name = course['name'].replace('"', '') if course['name'] is not None else None
        clean_code = course['code'].replace('"', '') if course['code'] is not None else None

        # Actualiza el documento si alguno de los campos fue modificado
        if (clean_name is not None and clean_name != course['name']) or (clean_code is not None and clean_code != course['code']):
            if clean_name is not None:
                frappe.db.set_value('Course', course['name'], 'name', clean_name)
            if clean_code is not None:
                frappe.db.set_value('Course', course['name'], 'code', clean_code)

    frappe.db.commit()

# Ejecuta la función
remove_quotes_from_course_name_and_code()
2024-08-21 06:17:52,469 INFO ipython def remove_quotes_from_course_name_and_code():
    # Consulta todos los registros de Course
    courses = frappe.get_all('Course', fields=['name', 'code'])
    
    modified_count = 0  # Contador de cursos modificados

    for course in courses:
        # Verifica si los campos no son None antes de reemplazar
        clean_name = course['name'].replace('"', '') if course['name'] is not None else None
        clean_code = course['code'].replace('"', '') if course['code'] is not None else None

        # Actualiza el documento si alguno de los campos fue modificado
        if (clean_name is not None and clean_name != course['name']) or (clean_code is not None and clean_code != course['code']):
            if clean_name is not None:
                frappe.db.set_value('Course', course['name'], 'name', clean_name)
            if clean_code is not None:
                frappe.db.set_value('Course', course['name'], 'code', clean_code)
            
            modified_count += 1  # Incrementa el contador si se modifica algún curso

    frappe.db.commit()
    
    print(f"Número de cursos modificados: {modified_count}")

# Ejecuta la función
remove_quotes_from_course_name_and_code()
2024-08-21 06:17:52,469 INFO ipython === session end ===
2024-08-21 14:04:52,757 INFO ipython === bench console session ===
2024-08-21 14:04:52,758 INFO ipython from integracion.integracion.invoice_from_email import invoice_from_email


# Ejecutar la función con datos de prueba('Test Subject', 'Test Content', 'test@example.com', None)
2024-08-21 14:04:52,758 INFO ipython from integracion.integracion.invoice_from_email import invoice_from_email 

# Ejecutar la función con datos de prueba
invoice_from_email('Test Subject', 'Test Content', 'test@example.com', None)
2024-08-21 14:04:52,758 INFO ipython === session end ===
2024-08-22 10:03:42,252 INFO ipython === bench console session ===
2024-08-22 10:03:42,253 INFO ipython import csv
from frappe import _

# Ruta al archivo CSV
csv_file_path = "/home/frappe/frappe-bench/importacion/burgos_atu.csv"

# Nombre de la compañía
company_name = "Burgos atu SL"
company_abbr = frappe.get_value("Company", company_name, "abbr")

# Leer el archivo CSV
with open(csv_file_path, mode='r', encoding='utf-8') as file:
    csv_reader = csv.DictReader(file)
    
    # Contador para limitar a las primeras 10 cuentas
    count = 0
    
    for row in csv_reader:
        if count >= 10:
            break

        account_number = row['account_number']
        account_name = row['account_name']

        # Crear el nombre completo de la cuenta
        account_full_name = f"{account_number} - {account_name} - {company_abbr}"

        # Verificar si la cuenta ya existe
        if frappe.db.exists("Account", {"account_number": account_number, "company": company_name}):
            print(f"La cuenta ya existe: {account_full_name}. Saltando creación.")
            continue

        # Inicialmente asumimos que la cuenta no tiene padre
        parent_account = None

        # Recorrer los dígitos de la cuenta para encontrar la cuenta padre
        for i in range(1, len(account_number) + 1):
            parent_account_candidate = account_number[:i]
            # Buscar la cuenta grupo que coincida con el prefijo actual
            possible_parent_account = frappe.db.exists(
                "Account",
                {
                    "account_number": parent_account_candidate,
                    "company": company_name,
                    "is_group": 1
                }
            )
            if possible_parent_account:
                parent_account = possible_parent_account  # Machacar con la cuenta grupo más específica

        # Si se encontró un padre, traer tipo de root y tipo de reporte de la cuenta principal
        if parent_account:
            parent_account_doc = frappe.get_doc("Account", parent_account)
            root_type = parent_account_doc.root_type
            report_type = parent_account_doc.report_type
        else:
            root_type = "Liability"  # Asume un tipo por defecto si no se encuentra un padre
            report_type = "Balance Sheet"  # Asume un tipo por defecto si no se encuentra un padre

        # Mostrar información y pedir confirmación
        print(f"Preparado para añadir la cuenta: {account_full_name}")
        print(f"  - Número de cuenta: {account_number}")
        print(f"  - Nombre de cuenta: {account_name}")
        print(f"  - Cuenta padre: {parent_account if parent_account else 'Ninguna'}")
        print(f"  - Root Type: {root_type}")
        print(f"  - Report Type: {report_type}")
        
        confirm = input("¿Desea añadir esta cuenta? (S/N): ").strip().upper()
        if confirm != 'S':
            print(f"Cuenta omitida: {account_full_name}")
            continue

        # Crear la cuenta
        account_doc = frappe.get_doc({
            "doctype": "Account",
            "company": company_name,
            "parent_account": parent_account if parent_account else "",
            "account_number": account_number,
            "account_name": account_name,
            "root_type": root_type,
            "report_type": report_type,
            "is_group": 0,  # Asume que la nueva cuenta no es un grupo
        })

        try:
            account_doc.insert(ignore_permissions=True)
            frappe.db.commit()
            print(f"Cuenta creada: {account_full_name}")
        except frappe.DuplicateEntryError:
            print(f"Cuenta ya existente: {account_full_name}")
        except Exception as e:
            print(f"Error creando la cuenta {account_full_name}: {e}")

        count += 1
2024-08-22 10:03:42,254 INFO ipython import csv
from frappe import _

# Ruta al archivo CSV
csv_file_path = "/home/frappe/frappe-bench/importacion/burgos_atu.csv"

# Nombre de la compañía
company_name = "Burgos atu SL"
company_abbr = frappe.get_value("Company", company_name, "abbr")

# Lista para almacenar los detalles de las cuentas creadas
created_accounts = []

# Leer el archivo CSV
with open(csv_file_path, mode='r', encoding='utf-8') as file:
    csv_reader = csv.DictReader(file)
    
    for row in csv_reader:
        account_number = row['account_number']
        account_name = row['account_name']

        # Crear el nombre completo de la cuenta
        account_full_name = f"{account_number} - {account_name} - {company_abbr}"

        # Verificar si la cuenta ya existe
        if frappe.db.exists("Account", {"account_number": account_number, "company": company_name}):
            print(f"La cuenta ya existe: {account_full_name}. Saltando creación.")
            continue

        # Inicialmente asumimos que la cuenta no tiene padre
        parent_account = None

        # Recorrer los dígitos de la cuenta para encontrar la cuenta padre
        for i in range(1, len(account_number) + 1):
            parent_account_candidate = account_number[:i]
            # Buscar la cuenta grupo que coincida con el prefijo actual
            possible_parent_account = frappe.db.exists(
                "Account",
                {
                    "account_number": parent_account_candidate,
                    "company": company_name,
                    "is_group": 1
                }
            )
            if possible_parent_account:
                parent_account = possible_parent_account  # Machacar con la cuenta grupo más específica

        # Si se encontró un padre, traer tipo de root y tipo de reporte de la cuenta principal
        if parent_account:
            parent_account_doc = frappe.get_doc("Account", parent_account)
            root_type = parent_account_doc.root_type
            report_type = parent_account_doc.report_type

        # Crear la cuenta
        account_doc = frappe.get_doc({
            "doctype": "Account",
            "company": company_name,
            "parent_account": parent_account if parent_account else "",
            "account_number": account_number,
            "account_name": account_name,
            "root_type": root_type,
            "report_type": report_type,
            "is_group": 0,  # Asume que la nueva cuenta no es un grupo
        })

        try:
            account_doc.insert(ignore_permissions=True)
            frappe.db.commit()
            print(f"Cuenta creada: {account_full_name}")

            # Añadir detalles a la lista de cuentas creadas
            created_accounts.append({
                "account_number": account_number,
                "account_name": account_name,
                "parent_account": parent_account_doc.name if parent_account else "Ninguna"
            })
        except frappe.DuplicateEntryError:
            print(f"Cuenta ya existente: {account_full_name}")
        except Exception as e:
            print(f"Error creando la cuenta {account_full_name}: {e}")

# Mostrar resumen de cuentas creadas
print("\nResumen de cuentas creadas:")
for account in created_accounts:
    print(f"  - {account['account_number']} - {account['account_name']} (Padre: {account['parent_account']})")
2024-08-22 10:03:42,254 INFO ipython === session end ===
2024-08-22 10:16:00,965 INFO ipython === bench console session ===
2024-08-22 10:16:00,965 INFO ipython # Obtener todas las hojas de contratación
job_offers = frappe.get_all('Job Offer', filters={}, fields=['name', 'custom_dninie', 'custom_empleado'])

# Recorrer cada hoja de contratación
for job_offer in job_offers:
    # Inicialmente, se asume que no se ha encontrado un empleado
    employee_exists = False
    
    # Comprobar si existe un empleado con el mismo custom_dninie
    if job_offer.custom_dninie:
        employee_exists = frappe.db.exists('Employee', {'custom_dninie_id': job_offer.custom_dninie})
    
    # Si no se encontró por custom_dninie, comprobar si el empleado en custom_empleado existe
    if not employee_exists and job_offer.custom_empleado:
        employee_exists = frappe.db.exists('Employee', {'name': job_offer.custom_empleado})
    
    # Si se encontró un empleado, actualizar custom_tiene_empleado a 1
    if employee_exists:
        frappe.db.set_value('Job Offer', job_offer.name, 'custom_tiene_empleado', 1)

# Confirmar los cambios
frappe.db.commit()

print("Actualización completada.")
2024-08-22 10:16:00,966 INFO ipython === session end ===
